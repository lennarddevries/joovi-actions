name: 'Docker Build Universal'
description: 'Build Docker images with intelligent caching for any project type'
author: 'lennarddevries'

branding:
  icon: 'package'
  color: 'blue'

inputs:
  context:
    description: 'Build context path'
    required: false
    default: '.'
  dockerfile:
    description: 'Dockerfile path'
    required: false
    default: './Dockerfile'
  target:
    description: 'Build target stage'
    required: false
  tags:
    description: 'Comma-separated list of tags'
    required: true
  platforms:
    description: 'Target platforms'
    required: false
    default: 'linux/amd64'
  push:
    description: 'Push to registry'
    required: false
    default: 'false'
  registry:
    description: 'Container registry'
    required: false
    default: 'ghcr.io'
  cache-key-prefix:
    description: 'Cache key prefix'
    required: false
    default: 'docker'
  cache-key:
    description: 'Override cache key (defaults to hash of lockfiles)'
    required: false
    default: ''
  restore-cache-key:
    description: 'Optional restore cache key to prefer before fallback prefix'
    required: false
    default: ''
  build-args:
    description: 'Build arguments (JSON format)'
    required: false
    default: '{}'
  registry-username:
    description: 'Registry username (required when push is true)'
    required: false
  registry-token:
    description: 'Registry token/password (required when push is true)'
    required: false

outputs:
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  image-tags:
    description: 'Image tags'
    value: ${{ steps.meta.outputs.tags }}
  cache-key:
    description: 'Cache key used'
    value: ${{ steps.cache.outputs.key }}

runs:
  using: 'composite'
  steps:
    - name: Generate cache key
      id: cache
      shell: bash
      run: |
        set -euo pipefail
        KEY_INPUT="${{ inputs.cache-key }}"
        if [ -z "$KEY_INPUT" ]; then
          FILES="${{ inputs.dockerfile }}"
          if [ -f "poetry.lock" ]; then FILES="$FILES poetry.lock pyproject.toml"; fi
          if [ -f "package-lock.json" ]; then FILES="$FILES package-lock.json"; fi
          if [ -f "pnpm-lock.yaml" ]; then FILES="$FILES pnpm-lock.yaml"; fi
          if [ -f "yarn.lock" ]; then FILES="$FILES yarn.lock"; fi
          HASH=$(echo "$FILES" | xargs cat | sha256sum | cut -d' ' -f1)
          KEY_INPUT="${{ inputs.cache-key-prefix }}-${{ runner.os }}-${HASH}"
        fi

        RESTORE_INPUT="${{ inputs.restore-cache-key }}"
        DEFAULT_RESTORE="${{ inputs.cache-key-prefix }}-${{ runner.os }}-"

        echo "key=$KEY_INPUT" >> "$GITHUB_OUTPUT"
        echo "restore-key=$RESTORE_INPUT" >> "$GITHUB_OUTPUT"
        echo "fallback-restore-key=$DEFAULT_RESTORE" >> "$GITHUB_OUTPUT"

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=raw,value=${{ inputs.tags }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      if: contains(inputs.platforms, 'arm')

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:v0.12.0
        buildkitd-flags: --debug

    - name: Login to Container Registry
      if: inputs.push == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-token }}

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ steps.cache.outputs.key }}
        restore-keys: |
          ${{ steps.cache.outputs.restore-key }}
          ${{ steps.cache.outputs.fallback-restore-key }}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        target: ${{ inputs.target }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          ${{ inputs.build-args }}
        cache-from: |
          type=local,src=/tmp/.buildx-cache
          type=registry,ref=${{ inputs.registry }}/${{ github.repository }}:buildcache
        cache-to: |
          type=local,dest=/tmp/.buildx-cache-new,mode=max
        outputs: ${{ inputs.push == 'false' && 'type=docker,dest=/tmp/image.tar' || '' }}

    - name: Update cache
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

    - name: Upload image artifact
      if: inputs.push == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 1
