name: 'Commitizen Bump'
description: 'Automated semantic versioning for Python projects using commitizen'
author: 'lennarddevries'

branding:
  icon: 'tag'
  color: 'yellow'

inputs:
  github-token:
    description: 'GitHub token for pushing changes'
    required: true
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'
  dry-run:
    description: 'Run in dry-run mode (no actual release)'
    required: false
    default: 'false'

outputs:
  new-release-published:
    description: 'Whether a new release was published'
    value: ${{ steps.check-bump.outputs.new_release_published }}
  new-release-version:
    description: 'Version of the new release'
    value: ${{ steps.bump.outputs.new_version }}
  new-release-git-tag:
    description: 'Git tag of the new release'
    value: ${{ steps.bump.outputs.new_tag }}

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install commitizen
      shell: bash
      run: |
        pip install --upgrade pip
        pip install commitizen

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Check if bump is needed
      id: check-bump
      shell: bash
      run: |
        set +e
        cz bump --check-consistency --dry-run
        BUMP_EXIT_CODE=$?
        set -e

        if [ $BUMP_EXIT_CODE -eq 0 ]; then
          echo "new_release_published=false" >> $GITHUB_OUTPUT
          echo "No version bump needed"
        elif [ $BUMP_EXIT_CODE -eq 21 ]; then
          echo "new_release_published=true" >> $GITHUB_OUTPUT
          echo "Version bump needed"
        else
          echo "Error checking for version bump (exit code: $BUMP_EXIT_CODE)"
          exit $BUMP_EXIT_CODE
        fi

    - name: Bump version
      id: bump
      if: steps.check-bump.outputs.new_release_published == 'true' && inputs.dry-run == 'false'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Run commitizen bump (updates pyproject.toml version and CHANGELOG.md)
        cz bump --yes --changelog

        # Get the new version and tag
        NEW_VERSION=$(cz version --project)
        NEW_TAG="v${NEW_VERSION}"

        echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "new_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

        echo "Bumped to version ${NEW_VERSION}"

    - name: Push changes and tags
      if: steps.check-bump.outputs.new_release_published == 'true' && inputs.dry-run == 'false'
      shell: bash
      run: |
        git push --follow-tags origin HEAD:${GITHUB_REF#refs/heads/}